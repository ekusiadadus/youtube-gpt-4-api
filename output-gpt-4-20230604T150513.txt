model: gpt-4
time: 0:01:09.785998
question: Chat
Given a list of messages describing a conversation, the model will return a response.

Create chat completionBeta
POST

https://api.openai.com/v1/chat/completions

Creates a model response for the given chat conversation.

Request body
model
string
Required
ID of the model to use. See the model endpoint compatibility table for details on which models work with the Chat API.

messages
array
Required
A list of messages describing the conversation so far. Example Python code.

role
string
Required
The role of the author of this message. One of system, user, or assistant.

content
string
Required
The contents of the message.

name
string
Optional
The name of the author of this message. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.

temperature
number
Optional
Defaults to 1
What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.

We generally recommend altering this or top_p but not both.

top_p
number
Optional
Defaults to 1
An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

We generally recommend altering this or temperature but not both.

n
integer
Optional
Defaults to 1
How many chat completion choices to generate for each input message.

stream
boolean
Optional
Defaults to false
If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message. Example Python code.

stop
string or array
Optional
Defaults to null
Up to 4 sequences where the API will stop generating further tokens.

max_tokens
integer
Optional
Defaults to inf
The maximum number of tokens to generate in the chat completion.

The total length of input tokens and generated tokens is limited by the model's context length. Example Python code for counting tokens.

presence_penalty
number
Optional
Defaults to 0
Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.

See more information about frequency and presence penalties.

frequency_penalty
number
Optional
Defaults to 0
Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.

See more information about frequency and presence penalties.

logit_bias
map
Optional
Defaults to null
Modify the likelihood of specified tokens appearing in the completion.

Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.

user
string
Optional
A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. Learn more.


```
import openai


class OpenAIClient:
    def __init__(self, model_name, api_key):
        self.model_name = model_name
        self.api_key = api_key
        openai.api_key = self.api_key
        self.client = openai

    def chat_complete(
        self, prompt, max_tokens=150,
```

あなたは、Google Python Style Guide の専門家です。
ChatCompletion の クラスの続きを書いてください。
また、コメントもGoogle形式で書いてください。
answer: ```
        temperature=0.8, top_p=1, n=1, stream=False, stop=None,
        presence_penalty=0, frequency_penalty=0, logit_bias=None, user=None
    ):
        """
        与えられたプロンプトに基づいてチャットの完成を生成します。

        Args:
            prompt (str): チャットの入力アシスタントに渡すメッセージ
            max_tokens (int, optional): 生成するトークンの最大数。デフォルトは150。
            temperature (float, optional): サンプリング温度。デフォルトは0.8。
            top_p (float, optional): トークンの確率分布から取得するトークンの最大数。デフォルトは1。
            n (int, optional): 各入力メッセージに対して生成するチャットの完成数。デフォルトは1。
            stream (bool, optional): ストリーミングの可否。デフォルトはFalse。
            stop (Union[str, List[str]], optional): 生成を停止する文字列または文字列のリスト。デフォルトはNone。
            presence_penalty (float, optional): 重複するトークンのペナルティ。デフォルトは0。
            frequency_penalty (float, optional): 既存のトークンの頻度に基づくペナルティ。デフォルトは0。
            logit_bias (Dict[int, float], optional): 特定のトークンの出現傾向を調整するマップ。デフォルトはNone。
            user (str, optional): エンドユーザーを表す一意の識別子。デフォルトはNone。

        Returns:
            Dict: OpenAI APIからの応答
        """
        conversation_details = {
            "model": self.model_name,
            "messages": [{"role": "user", "content": prompt}],
            "temperature": temperature,
            "top_p": top_p,
            "n": n,
            "stream": stream,
            "max_tokens": max_tokens,
            "presence_penalty": presence_penalty,
            "frequency_penalty": frequency_penalty,
            "logit_bias": logit_bias,
            "stop": stop,
        }
        if user:
            conversation_details["user"] = user

        response = self.client.ChatCompletion.create(**conversation_details)

        return response

```
