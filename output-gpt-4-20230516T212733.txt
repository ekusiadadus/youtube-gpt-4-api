model: gpt-4
time: 0:03:25.277848
question: 

```TypeScript
import { Container, Box, Grid, Typography } from "@mui/material"
import Accordion from "@mui/material/Accordion"
import AccordionSummary from "@mui/material/AccordionSummary"
import AccordionDetails from "@mui/material/AccordionDetails"
import ExpandMoreIcon from "@mui/icons-material/ExpandMore"
import { APIDocs } from "../../APIDocs"
import { useParams } from "react-router-dom"
import { useAuth } from "../../../auth"



export const APIKey = () => {
  console.log("APIKey")
  const params = useParams()
  const auth = useAuth()
  const botID = params.botID as string
  // TODO: 動的に取得
  const companyID: string = auth.userID

  console.log("botID", botID)
  console.log("companyID", companyID)

  return (
    <>
      <Box
        sx={{
          display: "flex",
          flexDirection: "column",
          m: 4
        }}
      >
        <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
          <Grid container justifyContent="flex-end">
            <Grid item xs={13}>
              <Typography variant="h5">外部連携</Typography>
            </Grid>
          </Grid>
        </Container>

        <Accordion sx={{ width: "800px" }}>
          <AccordionSummary expandIcon={<ExpandMoreIcon />}>
            <Typography>API Docs</Typography>
          </AccordionSummary>
          <AccordionDetails>
            {/* <ReactMarkdown>{markdown}</ReactMarkdown> */}
            {/* <SyntaxHighlighter language={"shell"} style={prism}>
          {"curl -X hhoho"}
      </SyntaxHighlighter> */}
            <APIDocs />
          </AccordionDetails>
        </Accordion>
      </Box>
    </>
  )
}
```

上のコードで、埋め込みようのHTMLをユーザー側にモーダルで表示したいです。

埋め込みようのHTMLは、以下のような感じです。

```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <script
      id="test"
      type="text/javascript"
      async
      src="https://spiral-ai-dev-embedded-chat-bucket.s3.ap-northeast-1.amazonaws.com/embedded-chat.umd.cjs"
    ></script>
    <script type="text/javascript">
      const script = document.getElementById("test");
      script.addEventListener("load", () => {
        globalThis.run({ id: "ここにBOT_IDを埋め込む" });
      });
    </script>
  </head>

  <body>
    <div id="root"></div>
  </body>
</html>
```


id の箇所に、動的にcompany_id, bot_idを埋め込みたいです。
最初のTypeScriptのコードに続きを書いてください。


answer: 以下のようにコードを修正して、`useState` と `useEffect` を使って動的なHTMLのプレビューがモーダルで表示されるようにしました。

```TypeScript
import { Container, Box, Grid, Typography, Modal } from "@mui/material";
import { useState, useEffect } from "react";
import Accordion from "@mui/material/Accordion";
import AccordionSummary from "@mui/material/AccordionSummary";
import AccordionDetails from "@mui/material/AccordionDetails";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";
import { APIDocs } from "../../APIDocs";
import { useParams } from "react-router-dom";
import { useAuth } from "../../../auth";

export const APIKey = () => {
  console.log("APIKey");
  const params = useParams();
  const auth = useAuth();
  const botID = params.botID as string;
  // TODO: 動的に取得
  const companyID: string = auth.userID;

  console.log("botID", botID);
  console.log("companyID", companyID);

  const [open, setOpen] = useState(false);
  const [embedHtml, setEmbedHtml] = useState("");

  useEffect(() => {
    const embedCode = `
    <!DOCTYPE html>
      <html lang="en">
        <head>
          <meta charset="UTF-8" />
          <meta http-equiv="X-UA-Compatible" content="IE=edge" />
          <meta name="viewport" content="width=device-width, initial-scale=1.0" />
          <title>Document</title>
          <script
            id="test"
            type="text/javascript"
            async
            src="https://spiral-ai-dev-embedded-chat-bucket.s3.ap-northeast-1.amazonaws.com/embedded-chat.umd.cjs"
          ></script>
          <script type="text/javascript">
            const script = document.getElementById("test");
            script.addEventListener("load", () => {
              globalThis.run({ id: "${botID}" });
            });
          </script>
        </head>

        <body>
          <div id="root"></div>
        </body>
      </html>`;

    setEmbedHtml(embedCode);
  }, [botID]);

  const handleModalOpen = () => {
    setOpen(true);
  };

  const handleModalClose = () => {
    setOpen(false);
  };

  return (
    <>
      <Box
        sx={{
          display: "flex",
          flexDirection: "column",
          m: 4,
        }}
      >
        <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
          <Grid container justifyContent="flex-end">
            <Grid item xs={13}>
              <Typography variant="h5">外部連携</Typography>
            </Grid>
          </Grid>
        </Container>

        <Accordion sx={{ width: "800px" }}>
          <AccordionSummary expandIcon={<ExpandMoreIcon />}>
            <Typography>API Docs</Typography>
          </AccordionSummary>
          <AccordionDetails>
            {/* <ReactMarkdown>{markdown}</ReactMarkdown> */}
            {/* <SyntaxHighlighter language={"shell"} style={prism}>
          {"curl -X hhoho"}
      </SyntaxHighlighter> */}
            <APIDocs />
          </AccordionDetails>
        </Accordion>

        <Box>
          <button onClick={handleModalOpen}>埋め込みHTMLを表示</button>
        </Box>

        <Modal
          open={open}
          onClose={handleModalClose}
          aria-labelledby="modal-title"
          aria-describedby="modal-description"
        >
          <Box
            sx={{
              width: "80%",
              maxWidth: "800px",
              backgroundColor: "white",
              border: "2px solid #000",
              p: 2,
              position: "absolute",
              top: "50%",
              left: "50%",
              transform: "translate(-50%, -50%)",
              overflow: "scroll",
            }}
          >
            <Typography id="modal-title" variant="h6" component="h2">
              埋め込み用HTML
            </Typography>
            <Typography id="modal-description" sx={{ fontSize: "12px" }}>
              <pre>{embedHtml}</pre>
            </Typography>
          </Box>
        </Modal>
      </Box>
    </>
  );
};
```

このコードでは、`useState` を使ってモーダルの表示状態を管理し、`useEffect` を使って動的なHTMLを生成しています。埋め込み用のHTMLはモーダル内の Typography コンポーネントで表示しています。モーダルを開閉するためにも、Button 要素を追加しています。
