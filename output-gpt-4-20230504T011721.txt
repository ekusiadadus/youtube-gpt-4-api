model: gpt-4
time: 0:02:13.526817
question: 

{
  "manager-v1": {
    "env": {
      "local": "http://localhost:7999",
      "dev": "https://api-cleaning.dev.m2msystems.cloud",
      "prod": "https://api-cleaning.m2msystems.cloud"
    },
    "api": {
      "healthCheck": {
        "path": "/health_check",
        "desc": "ヘルスチェックを行う"
      },
      "listCheckitems": {
        "path": "/checkitems",
        "desc": "チェック項目の一覧を取得する"
      },
      "setCheckitems": {
        "path": "/checkitems",
        "desc": "チェック項目の一覧を保存する"
      }
    }
  },
  "manager-v2": {
    "env": {
      "local": "http://localhost:7999",
      "dev": "https://api-cleaning.dev.m2msystems.cloud",
      "prod": "https://api-cleaning.m2msystems.cloud"
    },
    "api": {
      "listCleanings": {
        "path": "/v2/cleanings",
        "desc": "@deprecated 自社の清掃の一覧を取得する"
      },
      "listDelegateCleanings": {
        "path": "/v2/delegate_cleanings",
        "desc": "@deprecated 委譲先の清掃の一覧を取得する"
      },
      "searchCleanings": {
        "path": "/v2/search/cleanings",
        "desc": "@deprecated 清掃管理者が物件名,日付で清掃を検索する"
      }
    }
  },
  "cleaner-v1": {
    "env": {
      "local": "http://localhost:7999",
      "dev": "https://api-cleaning.dev.m2msystems.cloud",
      "prod": "https://api-cleaning.m2msystems.cloud"
    },
    "api": {
      "startCleaning": {
        "path": "/cleanings/:cleaningId/start",
        "desc": "清掃員が清掃を開始する"
      }
    }
  }
}

上のようなJSON形式があります。

curl --location 'https://api-cleaning.dev.m2msystems.cloud/v3/search/cleanings' --header 'authority: api-cleaning.dev.m2msystems.cloud' --header 'accept: */*' --header 'accept-language: en-US,en;q=0.9' --header 'Content-Type: text/plain' --header 'Authorization: Bearer {JWT}' --data '{"startDate":"2023-02-12","endDate":"2023-03-19"}'

上のような形式のAPIを表しています。

JSONから、OpenAPI形式のドキュメントを生成するようなRustのライブラリを作りたいです。



answer: まず、まず、JSON形式をRustの構造体に変換し、OpenAPI形式のドキュメントを出力する関数を作成する必要があります。serdeとserde_jsonライブラリを使用してJSONをパースし、serde_yamlを使用してOpenAPI形式で出力します。

1. まず、Cargo.tomlに以下の依存関係を追加してください。

```toml
[dependencies]
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
serde_yaml = "0.8"
```

2. Rustの構造体を定義します。

```rust
use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize, Debug)]
pub struct JsonApi {
    pub manager_v1: VersionApi,
    pub manager_v2: VersionApi,
    pub cleaner_v1: VersionApi,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct VersionApi {
    pub env: Environment,
    pub api: serde_json::Map<String, serde_json::Value>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Environment {
    pub local: String,
    pub dev: String,
    pub prod: String,
}
```

3. JSONをパースし、OpenAPIドキュメントを作成する関数を実装します。

```rust
use serde_json::json;

fn generate_openapi(json_str: &str) -> Result<String, serde_yaml::Error> {
    let json_data: JsonApi = serde_json::from_str(json_str).unwrap();

    let openapi = json!({
        "openapi": "3.0.0",
        "info": {
            "title": "Generated API Document",
            "version": "1.0"
        },
        "paths": {
            // 各APIのパスと説明を追加
            ...
        }
    });

    // OpenAPI形式で出力
    serde_yaml::to_string(&openapi)
}
```

4. main関数でJSONを読み込み、OpenAPIドキュメントを生成します。

```rust
fn main() {
    let json = // 上で書かれているJSON形式のデータを読み込む

    match generate_openapi(&json) {
        Ok(openapi) => println!("{}", openapi),
        Err(e) => println!("Failed to generate OpenAPI document: {}", e),
    }
}
```

上記のコードを組み合わせることで、JSON形式のデータからOpenAPI形式のドキュメントを生成するRustのライブラリを作成できます。必要に応じて、各APIのパスと説明を追加し、さらに詳細なドキュメントを作成できます。
