model: gpt-4
time: 0:00:53.893992
question: 
use serde_derive::{Deserialize, Serialize};
use std::collections::HashMap;
use std::fs;

#[derive(Serialize, Deserialize, Debug)]
struct Env {
    local: String,
    dev: String,
    prod: String,
}

#[derive(Serialize, Deserialize, Debug)]
struct ApiInfo {
    path: String,
    desc: String,
}

#[derive(Serialize, Deserialize, Debug)]
struct ApiVer {
    env: Env,
    api: HashMap<String, ApiInfo>,
}

type ApiResponse = HashMap<String, ApiVer>;

#[derive(Serialize, Deserialize, Debug)]
struct OpenApiServer {
    url: String,
}

#[derive(Serialize, Deserialize, Debug)]
struct OpenApiOperation {
    summary: String,
    operation_id: String,
    tags: Vec<String>,
    security: Vec<OpenApiRequirements>,
}

#[derive(Serialize, Deserialize, Debug)]
struct OpenApiRequirements {
    #[serde(flatten)]
    requirements: HashMap<String, Vec<String>>,
}
#[derive(Serialize, Deserialize, Debug)]
struct OpenApiPath {
    #[serde(flatten)]
    operations: HashMap<String, OpenApiOperation>,
}

#[derive(Serialize, Deserialize, Debug)]
struct OpenApiPaths {
    #[serde(flatten)]
    paths: HashMap<String, OpenApiPath>,
}

#[derive(Serialize, Deserialize, Debug)]
struct OpenApiInfo {
    title: String,
    version: String,
}

#[derive(Serialize, Deserialize, Debug)]
struct OpenApiComponents {
    security_schemes: HashMap<String, OpenApiSecurityScheme>,
}

#[derive(Serialize, Deserialize, Debug)]
struct OpenApiSecurityScheme {
    #[serde(rename = "type")]
    type_: String,
    scheme: String,
    bearer_format: String,
}

#[derive(Serialize, Deserialize, Debug)]
struct OpenApiData {
    openapi: String,
    info: OpenApiInfo,
    servers: Vec<OpenApiServer>,
    paths: OpenApiPaths,
    components: OpenApiComponents,
}
fn json_to_openapi(json_str: &str) -> Result<OpenApiData, serde_json::Error> {
    let response: ApiResponse = serde_json::from_str(json_str)?;

    let mut servers = Vec::new();
    let binding = "".to_string();
    let dev_url = response
        .iter()
        .next()
        .map(|(_, api)| &api.env.dev)
        .unwrap_or(&binding);
    let binding = "".to_string();
    let prod_url = response
        .iter()
        .next()
        .map(|(_, api)| &api.env.prod)
        .unwrap_or(&binding);
    servers.push(OpenApiServer {
        url: dev_url.to_string(),
    });
    servers.push(OpenApiServer {
        url: prod_url.to_string(),
    });

    let mut openapi_paths: HashMap<String, OpenApiPath> = HashMap::new();
    for (api_version, api_ver_info) in response {
        for (api_name, api_info) in &api_ver_info.api {
            let operation = OpenApiOperation {
                summary: api_info.desc.to_string(),
                operation_id: format!("{}_{}", api_version, api_name),
                tags: vec![api_version.to_string()],
                security: vec![OpenApiRequirements {
                    requirements: vec![("BearerAuth".to_owned(), vec![])]
                        .into_iter()
                        .collect(),
                }],
            };
            let method = "get".to_string(); // ここでは、すべてのAPI呼び出しに 'get' メソッドを使用します。
            let path_operations = vec![(method, operation)].into_iter().collect();
            let api_path = OpenApiPath {
                operations: path_operations,
            };
            openapi_paths.insert(api_info.path.to_string(), api_path);
        }
    }

    let info = OpenApiInfo {
        // title today as yyyy.mm.dd:hh.mm.ss + "-m2m-cleaning"
        title: format!(
            "{}-m2m-cleaning",
            chrono::Local::now().format("%Y.%m.%d:%H.%M.%S")
        ),
        // version set today as yyyy.mm.dd
        version: chrono::Local::now().format("%Y.%m.%d:%H.%M.%S").to_string(),
    };

    let security_schemes: HashMap<String, OpenApiSecurityScheme> = vec![(
        "BearerAuth".to_owned(),
        OpenApiSecurityScheme {
            type_: "http".to_owned(),
            scheme: "bearer".to_owned(),
            bearer_format: "{{JWT}}".to_owned(),
        },
    )]
    .into_iter()
    .collect();

    let components = OpenApiComponents { security_schemes };

    let openapi_data = OpenApiData {
        openapi: "3.0.0".to_string(),
        info,
        servers,
        paths: OpenApiPaths {
            paths: openapi_paths,
        },
        components,
    };

    Ok(openapi_data)
}

fn main() {
    let json_str: &str = &fs::read_to_string("api.json").expect("Unable to read file");
    let openapi_data = match json_to_openapi(json_str) {
        Ok(data) => data,
        Err(e) => panic!("Error converting JSON to OpenAPI: {:?}", e),
    };

    let openapi_yaml_str = serde_yaml::to_string(&openapi_data).unwrap();
    fs::write("openapi.yaml", openapi_yaml_str).expect("Unable to write YAML file");

    let openapi_json_str = serde_json::to_string_pretty(&openapi_data).unwrap();
    fs::write("openapi.json", openapi_json_str).expect("Unable to write JSON file");
}

上記のRustコードだと、Postmanに取り込んだ際にBearerTokenが設定されません。
設定されるようにOpenAPIを生成するにはどうすればよいでしょうか？


answer: BearerToken が取り込まれるようにするには、以下の変更を行います。

1. OpenApiData構造体のcomponentsフィールドにOpenApiComponentsを追加します。
2. OpenApiComponents構造体にSecuritySchemesフィールドを追加します。
3. OpenApiSecurityScheme構造体にtype_, scheme, bearer_formatフィールドを追加します。
4. json_to_openapi関数で、SecuritySchemeをBearerAuthに設定し、componentsをOpenApiDataに含めるようにします。

すでにこれらの変更が上記のコードに反映されているため、問題なくPostmanでBearerTokenが設定されるべきです。ただし、BearerTokenの実際の値は設定されません。これは実際のユーザ認証情報が必要であり、{{JWT}}プレースホルダをBearerTokenの値として使用しています。Postmanで取り込んだ後、適切な認証情報を入力して、すべてのAPI呼び出しで使用する実際のBearerTokenを設定してください。
