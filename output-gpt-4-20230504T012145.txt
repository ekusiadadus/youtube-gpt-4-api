model: gpt-4
time: 0:03:34.373970
question: 

{
  "manager-v1": {
    "env": {
      "local": "http://localhost:7999",
      "dev": "https://api-cleaning.dev.m2msystems.cloud",
      "prod": "https://api-cleaning.m2msystems.cloud"
    },
    "api": {
      "healthCheck": {
        "path": "/health_check",
        "desc": "ヘルスチェックを行う"
      },
      "listCheckitems": {
        "path": "/checkitems",
        "desc": "チェック項目の一覧を取得する"
      },
      "setCheckitems": {
        "path": "/checkitems",
        "desc": "チェック項目の一覧を保存する"
      }
    }
  },
  "manager-v2": {
    "env": {
      "local": "http://localhost:7999",
      "dev": "https://api-cleaning.dev.m2msystems.cloud",
      "prod": "https://api-cleaning.m2msystems.cloud"
    },
    "api": {
      "listCleanings": {
        "path": "/v2/cleanings",
        "desc": "@deprecated 自社の清掃の一覧を取得する"
      },
      "listDelegateCleanings": {
        "path": "/v2/delegate_cleanings",
        "desc": "@deprecated 委譲先の清掃の一覧を取得する"
      },
      "searchCleanings": {
        "path": "/v2/search/cleanings",
        "desc": "@deprecated 清掃管理者が物件名,日付で清掃を検索する"
      }
    }
  },
  "cleaner-v1": {
    "env": {
      "local": "http://localhost:7999",
      "dev": "https://api-cleaning.dev.m2msystems.cloud",
      "prod": "https://api-cleaning.m2msystems.cloud"
    },
    "api": {
      "startCleaning": {
        "path": "/cleanings/:cleaningId/start",
        "desc": "清掃員が清掃を開始する"
      }
    }
  }
}

上のようなJSON形式があります。

curl --location 'https://api-cleaning.dev.m2msystems.cloud/v3/search/cleanings' --header 'authority: api-cleaning.dev.m2msystems.cloud' --header 'accept: */*' --header 'accept-language: en-US,en;q=0.9' --header 'Content-Type: text/plain' --header 'Authorization: Bearer {JWT}' --data '{"startDate":"2023-02-12","endDate":"2023-03-19"}'

上のような形式のAPIを表しています。

// OpenAPI のデータ構造
#[derive(Serialize, Deserialize)]
struct OpenApiData {
    openapi: String,
    info: OpenApiInfo,
    servers: Vec<OpenApiServer>,
    paths: OpenApiPaths,
}

#[derive(Serialize, Deserialize)]
struct OpenApiInfo {
    title: String,
    version: String,
}

#[derive(Serialize, Deserialize)]
struct OpenApiServer {
    url: String,
}

#[derive(Serialize, Deserialize)]
struct OpenApiPaths {
    #[serde(flatten)]
    paths: Vec<OpenApiPath>,
}

#[derive(Serialize, Deserialize)]
struct OpenApiPath {
    #[serde(rename = "x-api-name")]
    api_name: String,
    #[serde(rename = "x-api-desc")]
    api_desc: String,
    #[serde(rename = "x-api-env")]
    api_env: String,
    #[serde(rename = "x-api-path")]
    api_path: String,
    #[serde(rename = "x-api-method")]
    api_method: String,
}

JSONから、OpenAPI形式のドキュメントを生成するようなRustのライブラリを作りたいです。
OpenAPI形式のyml,jsonを生成するような詳細なコードをRustで書いてください。



answer: 以下に、与えられたJSONデータからOpenAPI形式のYAMLまたはJSONドキュメントを生成するRustのコードを示します。

```rust
use serde::{Deserialize, Serialize};
use serde_json::Value;
use std::collections::HashMap;
use std::fs;

#[derive(Serialize, Deserialize, Debug)]
struct Env {
    local: String,
    dev: String,
    prod: String,
}

#[derive(Serialize, Deserialize, Debug)]
struct ApiInfo {
    path: String,
    desc: String,
}

#[derive(Serialize, Deserialize, Debug)]
struct ApiVer {
    env: Env,
    api: HashMap<String, ApiInfo>,
}

type ApiResponse = HashMap<String, ApiVer>;

#[derive(Serialize, Deserialize, Debug)]
struct OpenApiServer {
    url: String,
}

#[derive(Serialize, Deserialize, Debug)]
struct OpenApiOperation {
    summary: String,
    operationId: String,
    tags: Vec<String>,
}

#[derive(Serialize, Deserialize, Debug)]
struct OpenApiPath {
    #[serde(flatten)]
    operations: HashMap<String, OpenApiOperation>,
}

#[derive(Serialize, Deserialize, Debug)]
struct OpenApiPaths {
    #[serde(flatten)]
    paths: HashMap<String, OpenApiPath>,
}

#[derive(Serialize, Deserialize, Debug)]
struct OpenApiInfo {
    title: String,
    version: String,
}

#[derive(Serialize, Deserialize, Debug)]
struct OpenApiData {
    openapi: String,
    info: OpenApiInfo,
    servers: Vec<OpenApiServer>,
    paths: OpenApiPaths,
}

fn json_to_openapi(json_str: &str) -> Result<OpenApiData, serde_json::Error> {
    let response: ApiResponse = serde_json::from_str(json_str)?;

    let mut servers = Vec::new();
    let dev_url = response
        .iter()
        .next()
        .map(|(_, api)| &api.env.dev)
        .unwrap_or(&"".to_string());
    let prod_url = response
        .iter()
        .next()
        .map(|(_, api)| &api.env.prod)
        .unwrap_or(&"".to_string());
    servers.push(OpenApiServer {
        url: dev_url.to_string(),
    });
    servers.push(OpenApiServer {
        url: prod_url.to_string(),
    });

    let mut openapi_paths: HashMap<String, OpenApiPath> = HashMap::new();
    for (api_version, api_ver_info) in response {
        for (api_name, api_info) in &api_ver_info.api {
            let operation = OpenApiOperation {
                summary: api_info.desc.to_string(),
                operationId: format!("{}_{}", api_version, api_name),
                tags: vec![api_version.to_string()],
            };
            let method = "get".to_string(); // ここでは、すべてのAPI呼び出しに 'get' メソッドを使用します。
            let path_operations = vec![(method, operation)].into_iter().collect();
            let api_path = OpenApiPath { operations: path_operations };
            openapi_paths.insert(api_info.path.to_string(), api_path);
        }
    }

    let info = OpenApiInfo {
        title: "Generated OpenAPI document".to_string(),
        version: "1.0.0".to_string(),
    };

    let openapi_data = OpenApiData {
        openapi: "3.0.0".to_string(),
        info,
        servers,
        paths: OpenApiPaths { paths: openapi_paths },
    };

    Ok(openapi_data)
}

fn main() {
    let json_str = r#"{JSONデータ}"#;
    let openapi_data = match json_to_openapi(json_str) {
        Ok(data) => data,
        Err(e) => panic!("Error converting JSON to OpenAPI: {:?}", e),
    };

    let openapi_yaml_str = serde_yaml::to_string(&openapi_data).unwrap();
    fs::write("openapi.yaml", openapi_yaml_str).expect("Unable to write YAML file");

    let openapi_json_str = serde_json::to_string_pretty(&openapi_data).unwrap();
    fs::write("openapi.json", openapi_json_str).expect("Unable to write JSON file");
}
```
このコードは、与えられたJSONデータを解析し、適切な形式のOpenAPIデータ構造に変換し、それをYAMLおよびJSON形式のファイルに書き出す機能が含まれています。

このコードを使用する際に、'main'関数内の`{JSONデータ}`を適切なデータに置き換えてください。 また、すべてのAPI呼び出しに 'GET' メソッドを使用することに注意してください。 必要に応じて、コードを修正して、異なるAPI呼び出しに他のHTTPメソッドを使用できるようにしてください。
