model: gpt-4
time: 0:00:27.641223
question: /* eslint-disable @typescript-eslint/restrict-plus-operands */
import React, { useEffect, useRef, useState } from "react"
import { css } from "@emotion/react"

export interface Message {
  id: string
  chat_id: string
  bot_id?: string
  user_id?: string
  author_type: string
  text?: string
  message_type: string
}

export const ChatPage = () => {
  const [userId, setUserId] = useState("")
  const [botId, setBotId] = useState("")
  const [messageText, setMessageText] = useState("")
  const [messages, setMessages] = useState<Message[]>([])
  const ws = useRef<WebSocket | null>(null)

  useEffect(() => {
    if (
      userId &&
      botId &&
      (ws.current === null || ws.current.readyState === WebSocket.CLOSED)
    ) {
      ws.current = new WebSocket(
        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands
        import.meta.env.VITE_FARGATE_WEBSOCKET_ENDPOINT +
          `/ws/chat/${userId}/${botId}`
      )

      ws.current.onmessage = function (event) {
        const messageData = JSON.parse(event.data)

        setMessages(prevMessages => {
          const existingMessageIndex = prevMessages.findIndex(
            msg => msg.id === messageData.id && msg.author_type === "bot"
          )
          if (existingMessageIndex > -1) {
            const newMessages = [...prevMessages]
            newMessages[existingMessageIndex] = {
              ...newMessages[existingMessageIndex],
              text:
                newMessages[existingMessageIndex].text +
                " " +
                messageData.message
            }
            return newMessages
          } else {
            return [
              ...prevMessages,
              {
                id: messageData.id,
                chat_id: messageData.chat_id,
                author_type: "bot",
                message_type: "default", // Add default value or use data from message
                text: messageData.message,
                bot_id: botId
              }
            ]
          }
        })
      }
    }
  }, [userId, botId])

  const sendMessage = (event: React.FormEvent) => {
    event.preventDefault()
    if (ws.current !== null && ws.current.readyState === WebSocket.OPEN) {
      ws.current.send(messageText)
      setMessages(prevMessages => [
        ...prevMessages,
        {
          id: "temp",
          chat_id: "tempChatId", // Replace with actual chat_id when available
          author_type: "user",
          message_type: "default", // Add default value or use data from message
          text: messageText,
          user_id: userId
        }
      ])
      setMessageText("")
    }
  }

  return (
    <div>
      <h1>WebSocket Chat</h1>
      <form onSubmit={sendMessage}>
        <input
          type="text"
          value={userId}
          onChange={e => {
            setUserId(e.target.value)
          }}
          placeholder="Enter user id"
          required
        />
        <input
          type="text"
          value={botId}
          onChange={e => {
            setBotId(e.target.value)
          }}
          placeholder="Enter bot id"
          required
        />
        <input
          type="text"
          value={messageText}
          onChange={e => {
            setMessageText(e.target.value)
          }}
          placeholder="Enter message"
          required
        />
        <input type="submit" value="Send" />
      </form>
      <ul>
        {messages.map(message => (
          <div
            key={message.id}
            // eslint-disable-next-line react/no-unknown-property
            css={css`
              padding: 10px;
              margin-bottom: 10px;
              border-radius: 5px;
              background-color: ${message.author_type === "bot"
                ? "#f0f0f0"
                : "#e0f7fa"};
              text-align: ${message.author_type === "bot" ? "left" : "right"};
            `}
          >
            <li key={message.id}>{message.text}</li>
          </div>
        ))}
      </ul>
    </div>
  )
}


export default ChatPage


import { useEffect, useMemo, useRef, useState } from "react"
import "./index.css"
import { goodChatHistory, badChatHistory } from "../../api/chat/likeChat"
interface ChatType {
  type: string // msg or end
  message?: string
  chat_sort_id?: string
  created_at?: string
  documents?: Array<{
    resource_id: string
    resource_name: string
    resource_url: string
  }>
}

const ChatForm = ({
  companyID,
  botID,
  chatTitle,
  firstMessage
}: {
  companyID: string
  botID: string
  chatTitle: string
  firstMessage: string
}) => {
  const [inputText, setInputText] = useState<ChatType>({ type: "loading" })
  const [chatTexts, setChatTexts] = useState<ChatType[]>([])
  const [firstPostedAt, setFirstPostedAt] = useState<number | null>(null)
  const endpointURLBase: string = import.meta.env.VITE_WEBSOCKET_ENDPOINT
  const endpointURL: string =
    botID && companyID
      ? endpointURLBase +
        "?" +
        "bot_id=" +
        botID +
        "&" +
        "company_id=" +
        companyID
      : endpointURLBase
  const [isClickedSend, setIsClickedSend] = useState<boolean>(false)
  const chatTextsElement = useRef<HTMLDivElement>(null)
  useEffect(() => {
    if (chatTextsElement.current) {
      chatTextsElement.current.scrollTop = chatTextsElement.current.scrollHeight
    }
  }, [chatTexts])

  // const initMessages = [
  //   "こんにちは",
  //   "チャットの使い方を教えて",
  //   "今日の天気は？"
  // ]

  const initMessages: string[] = []

  const onClickSend = async (messageText?: string) => {
    if (isClickedSend) {
      return
    }
    chatTextsElement?.current?.scrollTo(
      0,
      chatTextsElement.current.scrollHeight
    )
    // const chatTextsElement = document.getElementById("chat_texts")
    setIsClickedSend(true)
    const text = messageText
      ? { message: messageText, type: "human" }
      : inputText
    const storeChatTexts = [...chatTexts, text, { type: "loading" }]
    setChatTexts(storeChatTexts)
    setInputText({ type: "loading" })

    const connection = new WebSocket(endpointURL)

    connection.onopen = function () {
      connection.send(
        JSON.stringify({
          action: "sendmessage",
          company_id: companyID,
          user_id: companyID,
          bot_id: botID,
          created_at: firstPostedAt,
          history: chatTexts.map((setChatText, index) => {
            if (index % 2 === 0) {
              return {
                type: "human",
                message: setChatText.message ?? ""
              }
            } else {
              return {
                type: "ai",
                message: setChatText.message ?? ""
              }
            }
          }),
          user_input: text.message
        })
      )
    }

    let responseText: ChatType = {
      type: ""
    }

    connection.onmessage = function (event: MessageEvent) {
      const eventData: ChatType = JSON.parse(event.data)
      if (eventData.type === "msg") {
        responseText = {
          type: eventData.type,
          message: (responseText?.message ?? "") + (eventData.message ?? "")
        }
      } else if (eventData.type === "end") {
        responseText = {
          ...responseText,
          documents: eventData.documents,
          chat_sort_id: eventData.chat_sort_id
        }
        setFirstPostedAt(() => Number(eventData.created_at))
      } else if (eventData.type === "err") {
        responseText = {
          type: eventData.type,
          message: eventData.message
        }
      }

      const newChatTexts = [...chatTexts, text]
      setChatTexts([...newChatTexts, responseText])
    }

    connection.onclose = function () {
      setIsClickedSend(false)
    }
  }

  return (
    <div className="chat-container">
      <div className="chat-header">
        <div className="chat-header-title">
          <h1>SpiralBot</h1>
          <span>{chatTitle}</span>
        </div>
      </div>
      <div className="chat-message-container" ref={chatTextsElement}>
        <div className="chat-message">
          <div className="chat-message-content">
            <p>
              <div key={0} className="chat-bot-message-container">
                <div className="chat-bot-message">{firstMessage}</div>
              </div>
              {chatTexts.map((chatText, index) => {
                return (
                  <ChatMessage
                    botId={botID}
                    key={index}
                    chatText={chatText}
                    index={index}
                  />
                )
              })}
            </p>
          </div>
        </div>
      </div>
      {chatTexts.length === 0 && (
        <div className="initial-message-buttons">
          {initMessages.map((message, index) => {
            return (
              <button
                key={index}
                className="initial-message-btn"
                onClick={e => {
                  e.preventDefault()
                  void onClickSend(message)
                }}
              >
                {message}
              </button>
            )
          })}
        </div>
      )}
      <div className="chat-input-container">
        <form className="chat-input-form">
          <input
            type="text"
            className="chat-input"
            placeholder="Type a message..."
            onChange={e => {
              setInputText({
                message: e.target.value,
                type: "human"
              })
            }}
            value={inputText.message}
          />
          <button
            type="submit"
            className="chat-btn-send"
            onClick={e => {
              e.preventDefault()
              void onClickSend()
              setInputText({
                message: "",
                type: "human"
              })
            }}
            disabled={inputText.message === ""}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 512 512"
              className="chat-btn-send-icon"
            >
              <path d="M476 3.2L12.5 270.6c-18.1 10.4-15.8 35.6 2.2 43.2L121 358.4l287.3-253.2c5.5-4.9 13.3 2.6 8.6 8.3L176 407v80.5c0 23.6 28.5 32.9 42.5 15.8L282 426l124.6 52.2c14.2 6 30.4-2.9 33-18.2l72-432C515 7.8 493.3-6.8 476 3.2z"></path>
            </svg>
          </button>
        </form>
      </div>
    </div>
  )
}

export const EmbeddedChat = ({
  botID,
  companyID,
  chatTitle,
  firstMessage
}: {
  botID: string
  companyID: string
  chatTitle: string
  firstMessage: string
}) => {
  const [open, setOpen] = useState(false)

  return (
    <div
      style={{
        position: "fixed",
        bottom: "20px",
        right: "20px"
      }}
    >
      {open && (
        <ChatForm
          companyID={companyID}
          botID={botID}
          chatTitle={chatTitle}
          firstMessage={firstMessage}
        />
      )}
      <a
        id={botID}
        className="floating-button"
        onClick={() => {
          setOpen(prev => !prev)
        }}
      >
        {open ? (
          <svg
            aria-hidden="true"
            focusable="false"
            data-prefix="fas"
            data-icon="xmark"
            className="svg-inline--fa fa-xmark"
            role="img"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 384 512"
          >
            <path
              fill="currentColor"
              d="M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z"
            ></path>
          </svg>
        ) : (
          <svg
            className="svg-inline--fa fa-comment"
            aria-hidden="true"
            focusable="false"
            data-prefix="fas"
            data-icon="comment"
            role="img"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 512 512"
          >
            <path
              fill="currentColor"
              d="M512 240c0 114.9-114.6 208-256 208c-37.1 0-72.3-6.4-104.1-17.9c-11.9 8.7-31.3 20.6-54.3 30.6C73.6 471.1 44.7 480 16 480c-6.5 0-12.3-3.9-14.8-9.9c-2.5-6-1.1-12.8 3.4-17.4l0 0 0 0 0 0 0 0 .3-.3c.3-.3 .7-.7 1.3-1.4c1.1-1.2 2.8-3.1 4.9-5.7c4.1-5 9.6-12.4 15.2-21.6c10-16.6 19.5-38.4 21.4-62.9C17.7 326.8 0 285.1 0 240C0 125.1 114.6 32 256 32s256 93.1 256 208z"
            ></path>
          </svg>
        )}
      </a>
    </div>
  )
}

const ChatMessage = ({
  botId,
  chatText,
  index
}: {
  botId: string
  chatText: ChatType
  index: number
}) => {
  const [showSource, setShowSource] = useState(false)
  const [answerEvaluation, setAnswerEvaluation] = useState<
    "default" | "good" | "bad"
  >("default")

  const showRating = useMemo(() => {
    if (chatText.chat_sort_id !== undefined) {
      return true
    }
  }, [chatText.chat_sort_id])

  const onRate = async (rate: "good" | "bad") => {
    const chatHistoryId = chatText.chat_sort_id // Make sure to replace this with actual chat sort id

    if (chatHistoryId === undefined) {
      return
    }

    if (rate === "good") {
      setAnswerEvaluation("good")
      await goodChatHistory(botId, chatHistoryId)
    } else {
      setAnswerEvaluation("bad")
      await badChatHistory(botId, chatHistoryId)
    }
  }

  return (
    <div
      className={`${
        index % 2 === 0
          ? "chat-user-message-container"
          : "chat-bot-message-container"
      }`}
    >
      <div
        className={`${
          index % 2 === 0 ? "chat-user-message" : "chat-bot-message"
        }`}
      >
        {chatText.type === "loading" && (
          <div className="loading-animation">
            <span>.</span>
            <span>.</span>
            <span>.</span>
          </div>
        )}
        {chatText.type === "error" && (
          <div className="chat-bot-message-error">{chatText.message}</div>
        )}
        <span>{chatText.message}</span>

        {index % 2 === 1 && (
          <div className="chat-bot-message-meta">
            {chatText.documents && chatText.documents.length > 0 && (
              <div className="chat-bot-message-source">
                <button
                  className="chat-bot-message-source-btn"
                  onClick={() => {
                    setShowSource(prev => !prev)
                  }}
                >
                  Sources
                  <svg
                    aria-hidden="true"
                    focusable="false"
                    data-prefix="fas"
                    data-icon="chevron-down"
                    className="source-hidden-button-icon"
                    role="img"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 512 512"
                    transform={showSource ? "rotate(180)" : ""}
                  >
                    <path
                      fill="currentColor"
                      d="M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z"
                    ></path>
                  </svg>
                </button>
                <div
                  className="chat-bot-message-source-list"
                  style={{
                    display: showSource ? "block" : "none"
                  }}
                >
                  {chatText.documents.map((document, index) => {
                    return (
                      <div key={index} className="chat-bot-message-source-item">
                        {!!document.resource_url && (
                          <a href={document.resource_url}>
                            {document.resource_name}
                          </a>
                        )}
                        {!document.resource_url && (
                          <div>{document.resource_name}</div>
                        )}
                      </div>
                    )
                  })}
                </div>
              </div>
            )}

            {showRating && answerEvaluation === "default" && (
              <div className="spiral-chat-bot-message-rate">
                <button
                  className="chat-bot-message-rate-btn"
                  title="Rate as unhelpful"
                  onClick={() => {
                    void onRate("bad")
                  }}
                >
                  <svg
                    aria-hidden="true"
                    focusable="false"
                    data-prefix="far"
                    data-icon="face-frown-open"
                    className="svg-inline--fa fa-face-frown-open fa-lg chat-bot-message-rate-btn-icon"
                    role="img"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 512 512"
                  >
                    <path
                      fill="currentColor"
                      d="M464 256A208 208 0 1 0 48 256a208 208 0 1 0 416 0zM0 256a256 256 0 1 1 512 0A256 256 0 1 1 0 256zM182.4 382.5c-12.4 5.2-26.5-4.1-21.1-16.4c16-36.6 52.4-62.1 94.8-62.1s78.8 25.6 94.8 62.1c5.4 12.3-8.7 21.6-21.1 16.4c-22.4-9.5-47.4-14.8-73.7-14.8s-51.3 5.3-73.7 14.8zM144.4 208a32 32 0 1 1 64 0 32 32 0 1 1 -64 0zm192-32a32 32 0 1 1 0 64 32 32 0 1 1 0-64z"
                    ></path>
                  </svg>
                </button>
                <button
                  title="Rate as helpful"
                  className="chat-bot-message-rate-btn"
                  onClick={() => {
                    void onRate("good")
                  }}
                >
                  <svg
                    aria-hidden="true"
                    focusable="false"
                    data-prefix="far"
                    data-icon="face-grin"
                    className="svg-inline--fa fa-face-frown-open fa-lg chat-bot-message-rate-btn-icon"
                    role="img"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 512 512"
                  >
                    <path
                      fill="currentColor"
                      d="M464 256A208 208 0 1 0 48 256a208 208 0 1 0 416 0zM0 256a256 256 0 1 1 512 0A256 256 0 1 1 0 256zm349.5 52.4c18.7-4.4 35.9 12 25.5 28.1C350.4 374.6 306.3 400 255.9 400s-94.5-25.4-119.1-63.5c-10.4-16.1 6.8-32.5 25.5-28.1c28.9 6.8 60.5 10.5 93.6 10.5s64.7-3.7 93.6-10.5zM144.4 208a32 32 0 1 1 64 0 32 32 0 1 1 -64 0zm192-32a32 32 0 1 1 0 64 32 32 0 1 1 0-64z"
                    ></path>
                  </svg>
                </button>
              </div>
            )}
            {showRating && answerEvaluation === "good" && (
              <div className="spiral-chat-bot-message-rate">
                <button
                  className="chat-bot-message-rate-btn"
                  title="Rate as unhelpful"
                  onClick={() => {
                    void onRate("bad")
                  }}
                >
                  <svg
                    aria-hidden="true"
                    focusable="false"
                    data-prefix="far"
                    data-icon="face-frown-open"
                    className="svg-inline--fa fa-face-frown-open fa-lg chat-bot-message-rate-btn-icon"
                    role="img"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 512 512"
                  >
                    <path
                      fill="currentColor"
                      d="M464 256A208 208 0 1 0 48 256a208 208 0 1 0 416 0zM0 256a256 256 0 1 1 512 0A256 256 0 1 1 0 256zM182.4 382.5c-12.4 5.2-26.5-4.1-21.1-16.4c16-36.6 52.4-62.1 94.8-62.1s78.8 25.6 94.8 62.1c5.4 12.3-8.7 21.6-21.1 16.4c-22.4-9.5-47.4-14.8-73.7-14.8s-51.3 5.3-73.7 14.8zM144.4 208a32 32 0 1 1 64 0 32 32 0 1 1 -64 0zm192-32a32 32 0 1 1 0 64 32 32 0 1 1 0-64z"
                    ></path>
                  </svg>
                </button>
                <button
                  title="Rate as helpful"
                  className="chat-bot-message-good-rate-btn"
                  onClick={() => {
                    void onRate("good")
                  }}
                >
                  <svg
                    aria-hidden="true"
                    focusable="false"
                    data-prefix="far"
                    data-icon="face-grin"
                    className="svg-inline--fa fa-face-frown-open fa-lg chat-bot-message-rate-btn-icon"
                    role="img"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 512 512"
                  >
                    <path
                      fill="currentColor"
                      d="M464 256A208 208 0 1 0 48 256a208 208 0 1 0 416 0zM0 256a256 256 0 1 1 512 0A256 256 0 1 1 0 256zm349.5 52.4c18.7-4.4 35.9 12 25.5 28.1C350.4 374.6 306.3 400 255.9 400s-94.5-25.4-119.1-63.5c-10.4-16.1 6.8-32.5 25.5-28.1c28.9 6.8 60.5 10.5 93.6 10.5s64.7-3.7 93.6-10.5zM144.4 208a32 32 0 1 1 64 0 32 32 0 1 1 -64 0zm192-32a32 32 0 1 1 0 64 32 32 0 1 1 0-64z"
                    ></path>
                  </svg>
                </button>
              </div>
            )}
            {showRating && answerEvaluation === "bad" && (
              <div className="spiral-chat-bot-message-rate">
                <button
                  className="chat-bot-message-bad-rate-btn"
                  title="Rate as unhelpful"
                  onClick={() => {
                    void onRate("bad")
                  }}
                >
                  <svg
                    aria-hidden="true"
                    focusable="false"
                    data-prefix="far"
                    data-icon="face-frown-open"
                    className="svg-inline--fa fa-face-frown-open fa-lg chat-bot-message-rate-btn-icon"
                    role="img"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 512 512"
                  >
                    <path
                      fill="currentColor"
                      d="M464 256A208 208 0 1 0 48 256a208 208 0 1 0 416 0zM0 256a256 256 0 1 1 512 0A256 256 0 1 1 0 256zM182.4 382.5c-12.4 5.2-26.5-4.1-21.1-16.4c16-36.6 52.4-62.1 94.8-62.1s78.8 25.6 94.8 62.1c5.4 12.3-8.7 21.6-21.1 16.4c-22.4-9.5-47.4-14.8-73.7-14.8s-51.3 5.3-73.7 14.8zM144.4 208a32 32 0 1 1 64 0 32 32 0 1 1 -64 0zm192-32a32 32 0 1 1 0 64 32 32 0 1 1 0-64z"
                    ></path>
                  </svg>
                </button>
                <button
                  title="Rate as helpful"
                  className="chat-bot-message-rate-btn"
                  onClick={() => {
                    void onRate("good")
                  }}
                >
                  <svg
                    aria-hidden="true"
                    focusable="false"
                    data-prefix="far"
                    data-icon="face-grin"
                    className="svg-inline--fa fa-face-frown-open fa-lg chat-bot-message-rate-btn-icon"
                    role="img"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 512 512"
                  >
                    <path
                      fill="currentColor"
                      d="M464 256A208 208 0 1 0 48 256a208 208 0 1 0 416 0zM0 256a256 256 0 1 1 512 0A256 256 0 1 1 0 256zm349.5 52.4c18.7-4.4 35.9 12 25.5 28.1C350.4 374.6 306.3 400 255.9 400s-94.5-25.4-119.1-63.5c-10.4-16.1 6.8-32.5 25.5-28.1c28.9 6.8 60.5 10.5 93.6 10.5s64.7-3.7 93.6-10.5zM144.4 208a32 32 0 1 1 64 0 32 32 0 1 1 -64 0zm192-32a32 32 0 1 1 0 64 32 32 0 1 1 0-64z"
                    ></path>
                  </svg>
                </button>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  )
}


一つ目のコードを元に、EmbeddedChatのデータの受け取りを変更して欲しいです。
answer: 以下に一つ目のコードをベースとした変更案をご提示します。

既存のpropsとして受け取っていた各種情報（botID, companyID, chatTitle, firstMessage）を、代わりにEmbeddedChatが受け取るオブジェクト形式のデータから読み出すようにします。データの形式を以下と仮定します。

```jsx
const chatData = {
  botID: "bot1",
  companyID: "company1",
  chatTitle: "Chat with our bot",
  firstMessage: "Hello, how can I assist you today?"
};
```

そして、そのデータをチャットコンポーネントに渡すように変更しました。

変更後のEmbeddedChat Componentsコードは以下の通りです。

```jsx
export const EmbeddedChat = ({ chatData }: { chatData: any }) => {
  const [open, setOpen] = useState(false)

  return (
    <div
      style={{
        position: "fixed",
        bottom: "20px",
        right: "20px"
      }}
    >
      {open && (
        <ChatForm
          companyID={chatData.companyID}
          botID={chatData.botID}
          chatTitle={chatData.chatTitle}
          firstMessage={chatData.firstMessage}
        />
      )}
      <a
        id={chatData.botID}
        className="floating-button"
        onClick={() => {
          setOpen(prev => !prev)
        }}
      >
        {open ? (
          // ... existing code
        ) : (
          // ... existing code
        )}
      </a>
    </div>
  )
}
```

この変更により、EmbeddedChatは複数のpropsを直接受け取る代わりに、一つのオブジェクト型のpropから必要なデータを取り出すようになります。そのため、chatDataオブジェクトが正しい形式とデータを持っている必要があります。
