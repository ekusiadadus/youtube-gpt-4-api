model: gpt-4
time: 0:01:45.775843
question: 

use serde::{Deserialize, Serialize};
use serde_derive::{Deserialize, Serialize};
use serde_json::Value;
use std::collections::HashMap;
use std::fs;

#[derive(Serialize, Deserialize, Debug)]
struct Env {
    local: String,
    dev: String,
    prod: String,
}

#[derive(Serialize, Deserialize, Debug)]
struct ApiInfo {
    path: String,
    desc: String,
}

#[derive(Serialize, Deserialize, Debug)]
struct ApiVer {
    env: Env,
    api: HashMap<String, ApiInfo>,
}

type ApiResponse = HashMap<String, ApiVer>;

#[derive(Serialize, Deserialize, Debug)]
struct OpenApiServer {
    url: String,
}

#[derive(Serialize, Deserialize, Debug)]
struct OpenApiOperation {
    summary: String,
    operationId: String,
    tags: Vec<String>,
}

#[derive(Serialize, Deserialize, Debug)]
struct OpenApiPath {
    #[serde(flatten)]
    operations: HashMap<String, OpenApiOperation>,
}

#[derive(Serialize, Deserialize, Debug)]
struct OpenApiPaths {
    #[serde(flatten)]
    paths: HashMap<String, OpenApiPath>,
}

#[derive(Serialize, Deserialize, Debug)]
struct OpenApiInfo {
    title: String,
    version: String,
}

#[derive(Serialize, Deserialize, Debug)]
struct OpenApiData {
    openapi: String,
    info: OpenApiInfo,
    servers: Vec<OpenApiServer>,
    paths: OpenApiPaths,
}

fn json_to_openapi(json_str: &str) -> Result<OpenApiData, serde_json::Error> {
    let response: ApiResponse = serde_json::from_str(json_str)?;

    let mut servers = Vec::new();
    let binding = "".to_string();
    let dev_url = response
        .iter()
        .next()
        .map(|(_, api)| &api.env.dev)
        .unwrap_or(&binding);
    let binding = "".to_string();
    let prod_url = response
        .iter()
        .next()
        .map(|(_, api)| &api.env.prod)
        .unwrap_or(&binding);
    servers.push(OpenApiServer {
        url: dev_url.to_string(),
    });
    servers.push(OpenApiServer {
        url: prod_url.to_string(),
    });

    let mut openapi_paths: HashMap<String, OpenApiPath> = HashMap::new();
    for (api_version, api_ver_info) in response {
        for (api_name, api_info) in &api_ver_info.api {
            let operation = OpenApiOperation {
                summary: api_info.desc.to_string(),
                operationId: format!("{}_{}", api_version, api_name),
                tags: vec![api_version.to_string()],
            };
            let method = "get".to_string(); // ここでは、すべてのAPI呼び出しに 'get' メソッドを使用します。
            let path_operations = vec![(method, operation)].into_iter().collect();
            let api_path = OpenApiPath {
                operations: path_operations,
            };
            openapi_paths.insert(api_info.path.to_string(), api_path);
        }
    }

    let info = OpenApiInfo {
        // title today as yyyy.mm.dd + "-m2m-cleaning"
        title: format!("{}-m2m-cleaning", chrono::Local::now().format("%Y.%m.%d")),
        // version set today as yyyy.mm.dd
        version: chrono::Local::now().format("%Y.%m.%d").to_string(),
    };

    let openapi_data = OpenApiData {
        openapi: "3.0.0".to_string(),
        info,
        servers,
        paths: OpenApiPaths {
            paths: openapi_paths,
        },
    };

    Ok(openapi_data)
}

fn main() {
    let json_str = r#"{json}"#;
    let openapi_data = match json_to_openapi(json_str) {
        Ok(data) => data,
        Err(e) => panic!("Error converting JSON to OpenAPI: {:?}", e),
    };

    let openapi_yaml_str = serde_yaml::to_string(&openapi_data).unwrap();
    fs::write("openapi.yaml", openapi_yaml_str).expect("Unable to write YAML file");

    let openapi_json_str = serde_json::to_string_pretty(&openapi_data).unwrap();
    fs::write("openapi.json", openapi_json_str).expect("Unable to write JSON file");
}

このコードは大変素晴らしく動きました。
しかし、OpenAPI形式でPostmanに取り込む際に manager, cleaner などでフォルダを分けるようなyaml, jsonを生成したいです。
残念ながら現状は、タグでなくパスパラメータのパスの一部で区切られています。
タグで区切るようにするにはどのようにすればよいでしょうか？


answer: タグをパスパラメータの一部を使用して区切るには、以下のステップに従ってコードを変更できます。

1. `json_to_openapi` 関数内で各 API のタグを生成します。
2. タグをパスパラメータの一部から作成します。
3. タグを `OpenApiOperation` 構造体に追加します。

以下のようにコードを修正してください：

```rust
use serde::{Deserialize, Serialize};
use serde_derive::{Deserialize, Serialize};
use serde_json::Value;
use std::collections::HashMap;
use std::fs;

// ... (他のコードは省略) ...

fn json_to_openapi(json_str: &str) -> Result<OpenApiData, serde_json::Error> {
    // ... (コードの一部を省略) ...

    for (api_version, api_ver_info) in response {
        for (api_name, api_info) in &api_ver_info.api {
            // ステップ 1: タグを生成する
            let path_segments: Vec<&str> = api_info.path.split('/').collect();
            let tag = path_segments.get(1).unwrap_or(&"default").to_string();

            // ステップ 2: タグをパスパラメータの一部から作成する
            // ステップ 3: タグを OpenApiOperation 構造体に追加する
            let operation = OpenApiOperation {
                summary: api_info.desc.to_string(),
                operationId: format!("{}_{}", api_version, api_name),
                tags: vec![tag], // タグを使用するように更新
            };
            let method = "get".to_string(); // ここでは、すべてのAPI呼び出しに 'get' メソッドを使用します。
            let path_operations = vec![(method, operation)].into_iter().collect();
            let api_path = OpenApiPath {
                operations: path_operations,
            };
            openapi_paths.insert(api_info.path.to_string(), api_path);
        }
    }

    // ... (コードの一部を省略) ...
}

// ... (他のコードは省略) ...

```

このようにして、OpenAPI YAML/JSON ファイルの各 API 操作に対して、パスパラメータの一部に基づいたタグが生成されます。Postmanでは、これによってフォルダが適切に分割されます。
