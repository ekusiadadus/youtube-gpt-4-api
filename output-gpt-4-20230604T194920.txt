model: gpt-4
time: 0:02:36.283319
question: ```
import os
from typing import Dict, List

import uvicorn
from fastapi import APIRouter, Depends, FastAPI, WebSocket, WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, EmailStr

from src.domain.model.user import User
from src.domain.usecase.bot_service import BotService
from src.domain.usecase.chat_history_service import ChatHistoryService
from src.domain.usecase.user_service import UserService
from src.infra.client.db.db import PostgresClient
from src.infra.repository_impl.bot import BotClient
from src.infra.repository_impl.chat_history import ChatHistoryClient
from src.infra.repository_impl.user import UserClient
from src.web.handlers.bot_handler import BotHandler, CreateBotInput
from src.web.handlers.chat_history_handler import ChatHistoryHandler, CreateChatHistoryInput
from src.web.handlers.user_handler import UserHandler


class ConnectionManager:
    def __init__(self):
        self.active_connections: Dict[str, List[WebSocket]] = {}

    async def connect(self, websocket: WebSocket, bot_id: str):
        if bot_id in self.active_connections:
            self.active_connections[bot_id].append(websocket)
        else:
            self.active_connections[bot_id] = [websocket]
        await websocket.accept()

    async def disconnect(self, websocket: WebSocket, bot_id: str):
        self.active_connections[bot_id].remove(websocket)

    async def send_message(self, message: str, bot_id: str):
        for connection in self.active_connections[bot_id]:
            await connection.send_text(message)


app = FastAPI(title="minyoo")
router = APIRouter()
origins = [
    "http://localhost",
    "http://localhost:8000",
    "http://localhost:8080",
    "http://localhost:3000",
    "http://localhost:7999",
    "*",
]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
    expose_headers=["*"],
)
manager = ConnectionManager()


class Server:
    """FastAPI server."""

    def __init__(self):
        self.host = os.getenv("DB_HOST")
        if self.host is None:
            raise ValueError("DB_HOST environment variable is not set.")

        self.port = os.getenv("DB_PORT")
        if self.port is None:
            raise ValueError("DB_PORT environment variable is not set.")

        self.port = int(self.port)

        self.user = os.getenv("DB_USER")
        if self.user is None:
            raise ValueError("DB_USER environment variable is not set.")

        self.password = os.getenv("DB_PASSWORD")
        if self.password is None:
            raise ValueError("DB_PASSWORD environment variable is not set.")

        self.database = os.getenv("DB_DATABASE")
        if self.database is None:
            raise ValueError("DB_DATABASE environment variable is not set.")

        self.db_client = PostgresClient(host=self.host, port=self.port, user=self.user, password=self.password, database=self.database)

        ###
        # Repositories
        ###
        self.user_repository = UserClient(db_client=self.db_client, table_name="users")
        self.bot_repository = BotClient(db_client=self.db_client, table_name="bots")
        self.chat_history_repository = ChatHistoryClient(db_client=self.db_client, table_name="chat_history")

        ###
        # Services
        ###
        self.user_service = UserService(
            user_repository=self.user_repository,
        )
        self.bot_service = BotService(
            bot_repository=self.bot_repository,
        )
        self.chat_history_service = ChatHistoryService(
            chat_history_repository=self.chat_history_repository,
        )

        ###
        # Handlers
        ###
        self.user_handler = UserHandler(user_service=self.user_service)
        self.bot_handler = BotHandler(bot_service=self.bot_service)
        self.chat_history_handler = ChatHistoryHandler(chat_history_service=self.chat_history_service)

    def run(self):
        uvicorn.run("src.web.init:app", host="0.0.0.0", port=7999, reload=True)


def get_server():
    return Server()


@app.get("/healthCheck/")
def healthcheck():
    """Endpoint for health checks.

    Returns:
        str: The status of the server.
    """
    return "Health - OK"


@app.websocket("/ws/chat/{user_id}/{bot_id}", name="chat")
async def websocket_endpoint(websocket: WebSocket, user_id: str, bot_id: str):
    await manager.connect(websocket, bot_id)
    try:
        while True:
            data = await websocket.receive_text()
            await manager.send_message(f"メッセージ: {data}", bot_id)
    except WebSocketDisconnect:
        await manager.disconnect(websocket, bot_id)


class UserOutput(BaseModel):
    id: str
    name: str
    email: EmailStr


@app.get("/users/{user_id}", response_description="Returns a list of users.")
async def find_user_by_id(user_id: str, server: Server = Depends(get_server)):
    """Endpoint to get a list of users.

    Returns:
        dict: A dictionary with a list of users.
    """
    return server.user_handler.find_by_id(user_id=user_id)


class FindByEmailInput(BaseModel):
    email: EmailStr


class FindByEmailOutput(BaseModel):
    id: str
    name: str
    email: EmailStr


@app.post("/users/email", response_description="Returns a user.")
async def find_by_email(input: FindByEmailInput, server: Server = Depends(get_server)):
    """Endpoint to get a list of users.

    Returns:
        dict: A dictionary with a list of users.
    """

    response = server.user_handler.find_by_email(email=input.email)

    return response


class CreateUserInput(BaseModel):
    name: str
    email: EmailStr
    password: str


@app.post("/users/", response_description="Creates a new user.")
async def create_user(input: CreateUserInput, server: Server = Depends(get_server)):
    """Endpoint to create a new user.

    Returns:
        dict: A dictionary with the new user.
    """

    user = User.new(name=input.name, email=input.email, password=input.password)
    return server.user_handler.save(user=user)


@app.delete("/users/{user_id}", response_description="Deletes a user.")
async def delete_user(user_id: str, server: Server = Depends(get_server)):
    """Endpoint to delete a user.

    Returns:
        dict: A dictionary with the deleted user.
    """
    return server.user_handler.delete(user_id=user_id)


@app.get("/bots/{bot_id}", response_description="Returns a bot.")
async def find_bot_by_id(bot_id: str, server: Server = Depends(get_server)):
    """Endpoint to get a list of bots.

    Returns:
        dict: A dictionary with a list of bots.
    """
    return server.bot_handler.find_by_id(bot_id=bot_id)


@app.post("/bots", response_description="Creates a new bot.")
async def create_bot(input: CreateBotInput, server: Server = Depends(get_server)):
    """Endpoint to create a new bot.

    Returns:
        dict: A dictionary with the new bot.
    """

    return server.bot_handler.save(input=input)


@app.delete("/bots/{bot_id}", response_description="Deletes a bot.")
async def delete_bot(bot_id: str, server: Server = Depends(get_server)):
    """Endpoint to delete a bot.

    Returns:
        dict: A dictionary with the new bot.
    """

    return server.bot_handler.delete(bot_id=bot_id)


@app.get("/chatHistory/{chat_history_id}", response_description="Returns a chat history.")
async def find_chat_history_by_id(chat_history_id: str, server: Server = Depends(get_server)):
    """Endpoint to get a list of chat histories.

    Returns:
        dict: A dictionary with a list of chat histories.
    """
    return server.chat_history_handler.find_by_id(chat_history_id=chat_history_id)


@app.post("/chatHistory", response_description="Creates a new chat history.")
async def create_chat_history(input: CreateChatHistoryInput, server: Server = Depends(get_server)):
    """Endpoint to create a new chat history.

    Returns:
        dict: A dictionary with the new chat history.
    """

    return server.chat_history_handler.save(input=input)


@app.delete("/chatHistory/{chat_history_id}", response_description="Deletes a chat history.")
async def delete_chat_history(chat_history_id: str, server: Server = Depends(get_server)):
    """Endpoint to delete a chat history.

    Returns:
        dict: A dictionary with the new chat history.
    """

    return server.chat_history_handler.delete(chat_history_id=chat_history_id)
```

FastAPI, Swagger で見やすくしたいです。
上のコードをリファクタしてください。
answer: 以下のように、コードをリファクタリングし、異なるファイルに分割して、管理しやすくします。

ファイル構造:
```
app
│
├── server.py
├── config.py
├── models.py
├── database.py
├── connection_manager.py
└── routers
│    ├── user.py
│    ├── bot.py
│    └── chat_history.py
└── main.py
```

### server.py
```python
import os

from fastapi import APIRouter, FastAPI, WebSocket, WebSocketDisconnect
from starlette.middleware.cors import CORSMiddleware
from typing import Dict, List

from app.connection_manager import ConnectionManager
from app.config import settings
from app.routers import user_router, bot_router, chat_history_router

app = FastAPI(title="minyoo")

# CORS設定
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
    expose_headers=["*"],
)

app.include_router(user_router.router)
app.include_router(bot_router.router)
app.include_router(chat_history_router.router)

manager = ConnectionManager()

async def websocket_endpoint(websocket: WebSocket, user_id: str, bot_id: str):
    await manager.connect(websocket, bot_id)
    try:
        while True:
            data = await websocket.receive_text()
            await manager.send_message(f"メッセージ: {data}", bot_id)
    except WebSocketDisconnect:
        await manager.disconnect(websocket, bot_id)

app.websocket("/ws/chat/{user_id}/{bot_id}", name="chat")(websocket_endpoint)
```

### config.py
```python
from pydantic import BaseSettings

class Settings(BaseSettings):
    origins: List[str] = [
        "http://localhost",
        "http://localhost:8000",
        "http://localhost:8080",
        "http://localhost:3000",
        "http://localhost:7999",
        "*",
    ]
    db_host: str
    db_port: int
    db_user: str
    db_password: str
    db_database: str

settings = Settings()
```

### models.py
```python
from pydantic import BaseModel, EmailStr

class UserOutput(BaseModel):
    id: str
    name: str
    email: EmailStr

class FindByEmailInput(BaseModel):
    email: EmailStr

class FindByEmailOutput(BaseModel):
    id: str
    name: str
    email: EmailStr

class CreateUserInput(BaseModel):
    name: str
    email: EmailStr
    password: str

class CreateBotInput(BaseModel):
    name: str
    user_id: str
    description: str

class CreateChatHistoryInput(BaseModel):
    user_id: str
    bot_id: str
    content: str
```

### database.py
```python
from app.config import settings
from src.infra.client.db.db import PostgresClient

db_client = PostgresClient(
    host=settings.db_host,
    port=settings.db_port,
    user=settings.db_user,
    password=settings.db_password,
    database=settings.db_database,
)
```

### connection_manager.py
```python
from typing import Dict, List
from fastapi import WebSocket

class ConnectionManager:
    def __init__(self):
        self.active_connections: Dict[str, List[WebSocket]] = {}

    async def connect(self, websocket: WebSocket, bot_id: str):
        if bot_id in self.active_connections:
            self.active_connections[bot_id].append(websocket)
        else:
            self.active_connections[bot_id] = [websocket]
        await websocket.accept()

    async def disconnect(self, websocket: WebSocket, bot_id: str):
        self.active_connections[bot_id].remove(websocket)

    async def send_message(self, message: str, bot_id: str):
        for connection in self.active_connections[bot_id]:
            await connection.send_text(message)
```

### routers/user.py
```python
from fastapi import APIRouter

from app.models import UserOutput, FindByEmailInput, FindByEmailOutput, CreateUserInput
from app.server import server

router = APIRouter()

@router.get("/users/{user_id}", response_description="Returns a list of users.")
async def find_user_by_id(user_id: str):
    return server.user_handler.find_by_id(user_id=user_id)

@router.post("/users/email", response_description="Returns a user.")
async def find_by_email(input: FindByEmailInput):
    response = server.user_handler.find_by_email(email=input.email)
    return response

@router.post("/users/", response_description="Creates a new user.")
async def create_user(input: CreateUserInput):
    user = User.new(name=input.name, email=input.email, password=input.password)
    return server.user_handler.save(user=user)

@router.delete("/users/{user_id}", response_description="Deletes a user.")
async def delete_user(user_id: str):
    return server.user_handler.delete(user_id=user_id)
```

### routers/bot.py
```python
from fastapi import APIRouter

from app.models import CreateBotInput
from app.server import server

router = APIRouter()

@router.get("/bots/{bot_id}", response_description="Returns a bot.")
async def find_bot_by_id(bot_id: str):
    return server.bot_handler.find_by_id(bot_id=bot_id)

@router.post("/bots", response_description="Creates a new bot.")
async def create_bot(input: CreateBotInput):
    return server.bot_handler.save(input=input)

@router.delete("/bots/{bot_id}", response_description="Deletes a bot.")
async def delete_bot(bot_id: str):
    return server.bot_handler.delete(bot_id=bot_id)
```

### routers/chat_history.py
```python
from fastapi import APIRouter

from app.models import CreateChatHistoryInput
from app.server import server

router = APIRouter()

@router.get("/chatHistory/{chat_history_id}", response_description="Returns a chat history.")
async def find_chat_history_by_id(chat_history_id: str):
    return server.chat_history_handler.find_by_id(chat_history_id=chat_history_id)

@router.post("/chatHistory", response_description="Creates a new chat history.")
async def create_chat_history(input: CreateChatHistoryInput):
    return server.chat_history_handler.save(input=input)

@router.delete("/chatHistory/{chat_history_id}", response_description="Deletes a chat history.")
async def delete_chat_history(chat_history_id: str):
    return server.chat_history_handler.delete(chat_history_id=chat_history_id)
```

### main.py
```python
from dotenv import load_dotenv
from app.server import app

if __name__ == '__main__':
    load_dotenv()
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=7999, reload=True)
```

全体的に異なるファイルに分割し、整理しました。そのうえで、FastAPIのルータを使用してアプリケーションの構成を簡素化しました。この構成では、各エンドポイントが個別のモジュールで定義されており、Swaggerで見やすく、管理しやすくなっています。
