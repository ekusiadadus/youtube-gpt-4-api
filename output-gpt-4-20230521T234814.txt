model: gpt-4
time: 0:03:48.103173
question: ```package.json
{
  "name": "react-shogi",
  "private": false,
  "version": "0.0.8",
  "type": "module",
  "license": "MIT",
  "author": {
    "name": "ekusiadadus",
    "email": "ekusiadadus@gmail.com"
  },
  "main": "./dist/ShogiGame.umd.js",
  "module": "./dist/ShogiGame.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/ekusiadadus/react-shogi"
  },
  "files": [
    "dist",
    "dist/types"
  ],
  "exports": {
    ".": {
      "import": "./dist/*",
      "require": "./dist/ShogiGame.umd.js"
    }
  },
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "lint": "eslint src --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview",
    "typecheck": "tsc -p .",
    "format": "prettier --write \"src/**/*.{ts,tsx}\"",
    "lint:css": "stylelint \"src/**/*.css\" --fix",
    "prepare": "husky install",
    "build:shogi": "tsc && vite --config vite.EmbeddedShogi.config.ts build",
    "build:lib": " vite --config vite.Library.config.ts build && tsc --project tsconfig.library.json"
  },
  "lint-staged": {
    "*.{js,jsx,ts,tsx}": "eslint --fix",
    "*.{js,jsx,ts,tsx,json,yml,html,css,md}": "prettier --write"
  },
  "dependencies": {
    "@rollup/plugin-terser": "^0.4.3",
    "@types/node": "^20.2.1",
    "eslint-config-preact": "^1.3.0",
    "eslint-config-prettier": "^8.8.0",
    "eslint-config-standard-with-typescript": "^34.0.1",
    "eslint-plugin-import": "^2.27.5",
    "husky": "^8.0.3",
    "lint-staged": "^13.2.2",
    "prettier": "^2.8.8",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "stylelint": "^15.6.2",
    "stylelint-config-recommended": "^12.0.0",
    "stylelint-config-standard": "^33.0.0"
  },
  "devDependencies": {
    "@types/react": "^18.0.28",
    "@types/react-dom": "^18.0.11",
    "@typescript-eslint/eslint-plugin": "^5.57.1",
    "@typescript-eslint/parser": "^5.59.5",
    "@vitejs/plugin-react-swc": "^3.0.0",
    "eslint": "^8.40.0",
    "eslint-plugin-n": ">=15.0.0 <17.0.0",
    "eslint-plugin-promise": ">=6.0.0 <7.0.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.0",
    "typescript": "^5.0.4",
    "vite": "^4.3.2"
  }
}
```

```tsconfig.library.json
{
  "compilerOptions": {
    "target": "ESNext",
    "lib": ["DOM", "DOM.Iterable", "ESNext"],
    "module": "ESNext",
    "skipLibCheck": true,

    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "emitDeclarationOnly": true,
    "declaration": true,
    "outDir": "dist",
    "declarationDir": "dist/types",
    "jsx": "react-jsx",

    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}
```

```vite.library.config.ts
import { defineConfig } from "vite"
import react from "@vitejs/plugin-react-swc"
import { resolve } from "path"
import terser from "@rollup/plugin-terser"

export default defineConfig({
  plugins: [react()],
  build: {
    minify: false,
    lib: {
      entry: resolve(__dirname, "src/lib/react-shogi/ShogiGame.tsx"),
      name: "ShogiGame",
      fileName: "ShogiGame"
    },
    rollupOptions: {
      // 必要な外部依存関係を指定します。
      external: ["react", "react-dom"],
      output: {
        // ライブラリのグローバル変数名を指定します。
        globals: {
          react: "React",
          "react-dom": "ReactDOM"
        },
        plugins: [terser()]
      }
    }
  }
})

```

``` src/lib/react-shogi/ShogiGame.tsx
import Game from "../../components/Game/Game"

export const ShogiGame = ({ KIF }: { KIF: string }) => {
  return <Game KIF={KIF} />
}
```

ShogiGameをnpmパッケージとして配布し、<ShogiGame KIF={}/> のような形で使えるようにしたいです。
現状は、パッケージを配布しても使用することができません。

どのように修正すればいいですか？
answer: まず、`package.json`の`dependencies`と`devDependencies`を適切に整理してください。以下のようになります。

```json
{
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@rollup/plugin-terser": "^0.4.3",
    "@types/node": "^20.2.1",
    "@types/react": "^18.0.28",
    "@types/react-dom": "^18.0.11",
    "@typescript-eslint/eslint-plugin": "^5.57.1",
    "@typescript-eslint/parser": "^5.59.5",
    "@vitejs/plugin-react-swc": "^3.0.0",
    "eslint": "^8.40.0",
    "eslint-config-preact": "^1.3.0",
    "eslint-config-prettier": "^8.8.0",
    "eslint-config-standard-with-typescript": "^34.0.1",
    "eslint-plugin-import": "^2.27.5",
    "eslint-plugin-n": ">=15.0.0 <17.0.0",
    "eslint-plugin-promise": ">=6.0.0 <7.0.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.0",
    "husky": "^8.0.3",
    "lint-staged": "^13.2.2",
    "prettier": "^2.8.8",
    "stylelint": "^15.6.2",
    "stylelint-config-recommended": "^12.0.0",
    "stylelint-config-standard": "^33.0.0",
    "typescript": "^5.0.4",
    "vite": "^4.3.2"
  }
}
```
次に、`vite.Library.config.ts`のファイル名を`vite.config.ts`に変更し、元の`vite.config.ts`は削除してください。これで、ビルド設定がひとつになります。そして、次のように、エントリーポイントのファイル名を修正して、UMDバンドルを有効化します。

```typescript
import { defineConfig } from "vite"
import react from "@vitejs/plugin-react-swc"
import { resolve } from "path"
import terser from "@rollup/plugin-terser"

export default defineConfig({
  plugins: [react()],
  build: {
    minify: false,
    lib: {
      entry: resolve(__dirname, "src/lib/react-shogi/ShogiGame.tsx"),
      name: "ShogiGame",
      fileName: (format) => `ShogiGame.${format}.js`
    },
    rollupOptions: {
      // 必要な外部依存関係を指定します。
      external: ["react", "react-dom"],
      output: {
        // ライブラリのグローバル変数名を指定します。
        globals: {
          react: "React",
          "react-dom": "ReactDOM"
        },
        format: 'umd',
        plugins: [terser()]
      }
    }
  }
})
```
最後に、`package.json`の`scripts`セクションを次のように修正してください。

```json
"scripts": {
  "dev": "vite",
  "build": "vite build && tsc",
  "lint": "eslint src --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
  "preview": "vite preview",
  "typecheck": "tsc -p .",
  "format": "prettier --write \"src/**/*.{ts,tsx}\"",
  "lint:css": "stylelint \"src/**/*.css\" --fix",
  "prepare": "husky install"
}
```

これで、`npm run build`を実行すると`dist`ディレクトリに必要なファイルが生成されます。このディレクトリをパッケージとして配布すれば、`import { ShogiGame } from "react-shogi"`のようにして使用できるようになります。
