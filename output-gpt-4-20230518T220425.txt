model: gpt-4
time: 0:03:57.133483
question: ```
from __future__ import annotations
from abc import ABC, abstractmethod
from typing import List, Optional
from pydantic import BaseModel
from decimal import Decimal

from boto3.session import Session
from boto3.dynamodb.types import TypeDeserializer, TypeSerializer

from models import (
    ResourceMetaBase,
    DocsMeta,
    BotMeta,
    ChatHistory,
    AnnotationMeta,
    User,
)
from logger import Logger

logger = Logger(__name__)


class ResourceMetaKeys(BaseModel):
    partition_key: str
    sort_key: str

    @staticmethod
    def create(
        company_id: str,
        resource_type: any,
        resource_id: str,
    ) -> ResourceMetaKeys:
        return ResourceMetaKeys(
            partition_key=company_id, sort_key=f"{resource_type}#{resource_id}"
        )

    @property
    def expression4get(self) -> dict:
        return {k: serializer.serialize(v) for k, v in self.asdict().items()}

    def asdict(self) -> dict:
        return {"partition_key": self.partition_key, "sort_key": self.sort_key}


class ResourceMetaClient:
    def __init__(self, env: str, region: str = "ap-northeast-1"):
        self.__table_name = f"resource_meta_{env}"
        self.__client = Session().client("dynamodb", region_name=region)

    def put(self, resource_meta: ResourceMetaBase) -> ResourceMetaBase:
        parameters = {
            "TableName": self.__table_name,
            "Item": self.__resource_meta2item(resource_meta),
        }
        return self.__client.put_item(**parameters)

    def __resource_meta2item(self, resource: ResourceMetaBase):
        items = resource.to_dict()
        items["partition_key"] = items["company_id"]
        items["sort_key"] = f"{items['resource_type']}#{items['resource_id']}"
        # nullに除外で対処
        return {
            k: serializer.serialize(v) for k, v in items.items() if v is not None
        }  # noqa E501

    def get_docs_meta(self, company_id: str, resource_id: str) -> DocsMeta:
        logger.info(f"get_docs_meta: {company_id}, {resource_id}")
        keys = ResourceMetaKeys.create(
            company_id=company_id, resource_type="docs", resource_id=resource_id
        )
        parameters = {
            "TableName": self.__table_name,
            "Key": keys.expression4get,
            "ProjectionExpression": ",".join(DocsMeta.props4get()),
        }
        res = self.__client.get_item(**parameters)
        if "Item" not in res:
            logger.info(f"document not found: {company_id}, {resource_id}")
            return None
        logger.info(f"document found: {company_id}, {resource_id}")
        return self.__item2docs_meta(res["Item"])

    def get_annotation_metas(
        self, company_id: str, resource_id: str
    ) -> None | tuple[AnnotationMeta, AnnotationMeta]:
        """
        questionとanswerのAnnotationペアを返却
        """
        keys = ResourceMetaKeys.create(
            company_id=company_id, resource_type="annotation", resource_id=resource_id
        )
        res = self.__client.query(
            TableName=self.__table_name,
            KeyConditionExpression="partition_key = :company_id AND begins_with ( sort_key, :sort_key )",
            ExpressionAttributeValues={
                ":company_id": {"S": company_id},
                ":sort_key": {"S": f"annotation#{resource_id}"},
            },
        )

        if "Items" not in res:
            raise KeyError(
                f"""Item with the couple of keys not found.
            Partition Key: {keys.partition_key}, Sort Key: {keys.sort_key}"""
            )
        if res["Items"] == []:
            return

        for item in res["Items"]:
            if item["resource_name"]["S"] == "annotation_answer":
                answer = AnnotationMeta.from_dynamo_response_item_dict(item)
            else:
                question = AnnotationMeta.from_dynamo_response_item_dict(item)
        try:
            question, answer = question, answer
        except Exception as e:
            # UPDATEME: logger.exception or error
            logger.info("Failed to get annotation pair from dynamo.")
            raise e

        return question, answer

    def __list_to_projection_expression(self, list) -> str:
        # boto3のget_itemsに渡すProjectionExpressionの要求する形式に変換する
        expression = ""
        for attribute in list:
            expression = expression + attribute + ","
        expression.rstrip()
        return expression

    def __item2docs_meta(self, item) -> ResourceMetaBase:
        deserialized = {
            k: self.__to_valid_type(deserializer.deserialize(v))
            for k, v in item.items()
        }
        return DocsMeta.from_dict(deserialized)

    def __to_valid_type(self, value) -> object:  # Don't allow decimals
        if isinstance(value, Decimal):
            if int(value) == value:
                return int(value)
            else:
                raise TypeError(
                    "Numbers in table should only be int, but decimal was found"
                )
        else:
            return value

    def get_bot_meta(self, company_id: str, resource_id: str) -> BotMeta:
        keys = ResourceMetaKeys.create(
            company_id=company_id, resource_type="bot", resource_id=resource_id
        )
        parameters = {"TableName": self.__table_name, "Key": keys.expression4get}
        res = self.__client.get_item(**parameters)
        if "Item" not in res:
            raise KeyError(
                f"""Item with the couple of keys not found.
            Partition Key: {keys.partition_key}, Sort Key: {keys.sort_key}"""
            )
        return self.__item2bot_meta(res["Item"])

    def __item2bot_meta(self, item) -> ResourceMetaBase:
        logger.info(f"(__item2bot_meta) item before deserialized: {item}")
        deserialized = {k: _deserialize(v) for k, v in item.items()}
        logger.info(f"(__item2bot_meta) item after deserialized: {deserialized}")
        if "references" in deserialized.keys():
            parsed_references = []
            for item in deserialized["references"]:
                parsed_ref = {}
                parsed_ref["resource_type"] = item.split("#")[0]
                parsed_ref["resource_id"] = "#".join(item.split("#")[1:])
                parsed_references.append(parsed_ref)
            deserialized["references"] = parsed_references
        logger.info(
            f"(__item2bot_meta) item after deserialized and refs parsed: {deserialized}"
        )

        return BotMeta.from_dict(deserialized)

    def list_docs_meta(
        self,
        company_id: str,
        resource_id: str = "root",
        order_by: Optional[str] = None,
        asc: bool = False,
    ) -> List[DocsMeta]:
        rid = "docs#" + resource_id
        parameters = {
            "TableName": self.__table_name,
            "KeyConditionExpression": "partition_key = :company_id"
            " AND begins_with(sort_key, :resource_type)",
            "ExpressionAttributeValues": {
                ":company_id": serializer.serialize(company_id),
                ":resource_type": serializer.serialize(rid),
            },
            "Select": "SPECIFIC_ATTRIBUTES",
            "ProjectionExpression": ",".join(DocsMeta.props4list()),
        }
        if order_by:
            parameters["IndexName"] = order_by
            parameters["ScanIndexForward"] = asc
        res = self.__client.query(**parameters)
        return [self.__item2docs_meta(item) for item in res["Items"]]

    def list_bots_meta(
        self,
        company_id: str,
        oeder_by: Optional[str] = None,
        asc: bool = False,
    ) -> List[BotMeta]:
        parameters = {
            "TableName": self.__table_name,
            "KeyConditionExpression": "partition_key = :company_id"
            " AND begins_with(sort_key, :resource_type)",
            "ExpressionAttributeValues": {
                ":company_id": serializer.serialize(company_id),
                ":resource_type": serializer.serialize("bot"),
            },
        }
        if oeder_by:
            parameters["IndexName"] = oeder_by
            parameters["ScanIndexForward"] = asc
        res = self.__client.query(**parameters)
        return [self.__item2bot_meta(item) for item in res["Items"]]

    def delete_bot(self, company_id, resource_id: str):
        """try to delete bot by id. if not exists, return False. other True."""
        keys = ResourceMetaKeys.create(company_id=company_id, resource_type="bot", resource_id=resource_id)
        parameters = {"TableName": self.__table_name, "Key": keys.expression4get}
        self.__client.delete_item(**parameters)

    def delete_documents(self, documents: List[DocsMeta]):
        """bulky idempotently deletion documents by DocsMeta list."""
        request = {"RequestItems": {self.__table_name: None}}
        # BatchWriteItem は 上限 25item までしか処理してくれないので分割
        pos = 0
        while pos < len(documents):
            window = documents[pos:pos+25]
            to_deletes = [{
                "DeleteRequest": {
                    "Key": {
                        "partition_key": serializer.serialize(doc.company_id),
                        "sort_key": serializer.serialize("docs#"+doc.resource_id),
                    }
                }
            } for doc in window]
            request["RequestItems"][self.__table_name] = to_deletes
            resp = self.__client.batch_write_item(**request)
            logger.info(f"(dynamo BatchWriteItem) response: {resp}")
            pos += 25
        return resp

    def fetch_child_documents(self, company_id, resource_id: str) -> List[str]:
        """fetch child documents by root resource_id."""
        rid = "docs#child#" + resource_id.split("#")[1]
        parameters = {
            "TableName": self.__table_name,
            "KeyConditionExpression": "partition_key = :company_id"
            " AND begins_with(sort_key, :resource_id_partial)",
            "ExpressionAttributeValues": {
                ":company_id": serializer.serialize(company_id),
                ":resource_id_partial": serializer.serialize(rid),
            },
            "Select": "SPECIFIC_ATTRIBUTES",
            "ProjectionExpression": ",".join(DocsMeta.props4list()),
        }
        res = self.__client.query(**parameters)
        return [self.__item2docs_meta(item) for item in res["Items"]]


class ChatHistoryClientBase(ABC):
    @abstractmethod
    def put(self, chat_history: ChatHistory):
        raise NotImplementedError()

    @abstractmethod
    def get(
        self,
        bot_id: str,
        user_id: str,
        created_at: int,
        posted_at: int,
        updated_at: Optional[int],
    ):
        raise NotImplementedError()

    @abstractmethod
    def list_chat_history_by_bot_id_user_id_history_id(
        self, bot_id: str, user_id: str, history_id: str
    ):
        raise NotImplementedError()

    @abstractmethod
    def list_chat_history_by_bot_id(self, bot_id: str, filterExpression: Optional[any]):
        raise NotImplementedError()


class ChatHistoryClient(ChatHistoryClientBase):
    def __init__(self, env: str, region: str = "ap-northeast-1"):
        self.table_name = f"chat_history_{env}"
        self.client = Session().client("dynamodb", region_name=region)

    def put(self, chat_history: ChatHistory) -> ChatHistory:
        attributes = {
            "TableName": self.table_name,
            "Item": self.__chat_history2items(chat_history),
        }
        self.client.put_item(**attributes)

    def __chat_history2items(self, chat_history: ChatHistory) -> dict:
        items = chat_history.to_dict()
        items["partition_key"] = items["bot_id"]
        if items["updated_at"] is None:
            items.pop("updated_at")
            items.pop("updated_by")
            items[
                "sort_key"
            ] = f"{items['user_id']}#{items['created_at']}#{items['posted_at']}#"  # noqa E501
        else:
            items[
                "sort_key"
            ] = f"{items['user_id']}#{items['created_at']}#{items['posted_at']}#{items['updated_at']}"  # noqa E501
        return {k: serializer.serialize(v) for k, v in items.items()}

    def __item2chat_history(self, item: dict) -> ChatHistory:
        logger.info(f"(__item2chat_history)item before desirialized: {item}")
        deserialized = {k: deserializer.deserialize(v) for k, v in item.items()}
        logger.info(f"(__item2chat_history)item after desirialized: {deserialized}")
        return ChatHistory.from_deserialized_dict(deserialized)

    def get(
        self,
        bot_id: str,
        user_id: str,
        created_at: int,
        posted_at: int,
        updated_at: Optional[int] = None,
    ):
        # keys = ResourceMetaKeys.create(company_id=company_id, resource_type="docs", resource_id=resource_id)
        partitionKey = bot_id
        sortKey = (
            f"{user_id}#{created_at}#{posted_at}#"
            if updated_at is None
            else f"{user_id}#{created_at}#{posted_at}#{updated_at}"
        )

        parameters = {
            "TableName": self.table_name,
            "Key": {"partition_key": {"S": partitionKey}, "sort_key": {"S": sortKey}},
        }
        res = self.client.get_item(**parameters)
        if "Item" not in res:
            raise KeyError(
                f"""Item with the couple of keys not found.
            Partition Key: {partitionKey}, Sort Key: {sortKey}"""
            )
        return self.__item2chat_history(res["Item"])

    def list_chat_history_by_bot_id(self, bot_id: str) -> list[ChatHistory]:
        parameters = {
            "TableName": self.table_name,
            "KeyConditionExpression": "partition_key = :bot_id",
            "ExpressionAttributeValues": {
                ":bot_id": serializer.serialize(bot_id),
            },
        }
        parameters["ScanIndexForward"] = False
        res = self.client.query(**parameters)
        return [self.__item2chat_history(item) for item in res["Items"]]

    def list_chat_history_by_bot_id_user_id_history_id(
        self, bot_id: str, user_id: str, created_at: int
    ) -> list[ChatHistory]:
        parameters = {
            "TableName": self.table_name,
            "KeyConditionExpression": "partition_key = :bot_id"
            " AND begins_with(sort_key, :user_id_history_id)",
            "ExpressionAttributeValues": {
                ":bot_id": serializer.serialize(bot_id),
                ":user_id_history_id": serializer.serialize(f"{user_id}#{created_at}"),
            },
        }
        parameters["ScanIndexForward"] = False
        res = self.client.query(**parameters)
        return [self.__item2chat_history(item) for item in res["Items"]]


class UserClientBase(ABC):
    @abstractmethod
    def get(self, user_id: str, company_id: str) -> User:
        raise NotImplementedError()

    @abstractmethod
    def get_or_none(self, user_id: str, company_id: str) -> User | None:
        raise NotImplementedError()

    @abstractmethod
    def create(self, user: User) -> User:
        raise NotImplementedError()

    @abstractmethod
    def update(self, user: User) -> User:
        raise NotImplementedError()

    @abstractmethod
    def get_by_user_id(self, user_id: str) -> User:
        raise NotImplementedError()

    @abstractmethod
    def delete(self, user_id: str, company_id: str) -> None:
        raise NotImplementedError()


class UserClient(UserClientBase):
    def __init__(self, env: str, region: str = "ap-northeast-1"):
        """
        Initializes the UserClient instance.

        Args:
            env (str): The environment identifier.
            region (str, optional): The AWS region. Defaults to "ap-northeast-1".
        """
        self.table_name = f"user_{env}"
        self.company_id_index = f"CompanyIdIndex-{env}"
        self.client = Session().client("dynamodb", region_name=region)

    def get(self, user_id: str, company_id: str) -> User:
        """
        Retrieves a User instance from DynamoDB using user_id and company_id.

        Args:
            user_id (str): The user identifier.
            company_id (str): The company identifier.

        Returns:
            User: The retrieved User instance.

        Raises:
            KeyError: If no item is found in DynamoDB with the given keys.
        """
        partitionKey = user_id
        sortKey = company_id

        parameters = {
            "TableName": self.table_name,
            "IndexName": self.company_id_index,
            "Select": "ALL_ATTRIBUTES",
            "KeyConditionExpression": "user_id = :user_id AND company_id = :company_id",
            "ExpressionAttributeValues": {
                ":user_id": {"S": user_id},
                ":company_id": {"S": company_id},
            },
        }

        res = self.client.query(**parameters)
        if "Items" in res and len(res["Items"]) > 0:
            return User.from_dynamo_item(res["Items"][0])
        else:
            return None

    def get_or_none(self, user_id: str, company_id: str) -> User | None:
        """
        Retrieves a User instance from DynamoDB using user_id and company_id.
        If not found, returns None.

        Args:
            user_id (str): The user identifier.
            company_id (str): The company identifier.

        Returns:
            User | None: The retrieved User instance or None if not found.
        """
        try:
            user: User = self.get(user_id=user_id, company_id=company_id)
            return user
        except Exception:
            return None

    def create(
        self,
        user: User,
    ) -> User:
        """
        Creates a new User instance and saves it to DynamoDB.

        Args:
            user (User): The User instance to be created.

        Returns:
            User: The created User instance.
        """
        item = {
            "user_id": {"S": user.user_id},
            "company_id": {"S": user.company_id},
        }
        if user.api_key is not None:
            item["api_key"] = {"S": user.api_key}

        parameters = {"TableName": self.table_name, "Item": item}

        self.client.put_item(**parameters)
        return User.from_dynamo_item(item)

    def get_by_user_id(self, user_id: str) -> User:
        params = {"TableName": self.table_name, "Key": {"user_id": {"S": user_id}}}
        result = self.client.get_item(**params)["Item"]

        user = User.from_dynamo_item(result)
        return user

    def update(self, user: User):
        """
        Updates a User instance and saves it to DynamoDB.

        Args:
            user (User): The User instance to be updated.

        Returns:
            User: The updated User instance.
        """

        item = self.__user2Item(user)
        parameters = {"TableName": self.table_name, "Item": item}
        self.client.put_item(**parameters)
        return user

    def __user2Item(self, user: User) -> dict:
        items = user.dict()
        return {k: serializer.serialize(v) for k, v in items.items()}

    def delete(self, user_id: str) -> None:
        """
        Deletes a User instance from DynamoDB using user_id and company_id.

        Args:
            user_id (str): The user identifier.
            company_id (str): The company identifier.
        """

        parameters = {
            "TableName": self.table_name,
            "Key": {"user_id": {"S": user_id}},
        }
        self.client.delete_item(**parameters)


serializer = TypeSerializer()
deserializer = TypeDeserializer()


def _deserialize(value):
    deserialized = deserializer.deserialize(value)
    if not isinstance(deserialized, Decimal):
        return deserialized
    if int(deserialized) == deserialized:
        return int(deserialized)
    return float(deserialized)
```

上のコードを高速化してください。
answer: 上記のソースコードでは、多くの操作がDynamoDBとの通信を伴っており、一般にこれがボトルネックとなり速度が低下する原因となります。高速化を目指す場合は、以下のようなアプローチを検討してみてください。

1. キャッシュの利用:
DynamoDBとの通信を減らすために、データの読み取り結果をメモリ内でキャッシュしておくことが推奨されます。特に繰り返しアクセスされるデータがあれば、キャッシュを利用することでパフォーマンス向上が期待できます。Pythonでキャッシュを簡単に利用する方法としては、[`functools.lru_cache`](https://docs.python.org/ja/3/library/functools.html#functools.lru_cache)デコレータを使用する方法があります。

例:

```python
from functools import lru_cache

@lru_cache(maxsize=None)  # キャッシュサイズを無制限にする場合
def get_cached_data(key):
    # DynamoDBからデータを取得する処理...
    return data
```

2. データのバッチ処理:
DynamoDBでは、一度に複数のアイテムを取得したり、複数のアイテムを書き込んだりすることができます。これにより、通信回数を減らすことができ、パフォーマンスが向上する可能性があります。例えば、[`batch_get_item`](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/dynamodb.html#DynamoDB.Client.batch_get_item)や[`batch_write_item`](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/dynamodb.html#DynamoDB.Client.batch_write_item)などのメソッドを使用することができます。

3. 非同期処理の活用:
Pythonの[asyncio](https://docs.python.org/ja/3/library/asyncio.html)ライブラリを利用して、非同期処理を行うことで、処理の並列化が可能になります。これにより、例えば複数のデータを同時にDynamoDBから取得したり、同時に書き込んだりすることができ、全体の処理時間を短縮することができます。

例:

```python
import asyncio
import aioboto3

async def async_get_data_from_dynamodb(keys):
    async with aioboto3.resource("dynamodb", region_name="ap-northeast-1") as dynamodb:
        table = dynamodb.Table("your_table_name")
        tasks = [table.get_item(Key=key) for key in keys]
        results = await asyncio.gather(*tasks)
    return results

def get_data_from_dynamodb(keys):
    return asyncio.run(async_get_data_from_dynamodb(keys))
```

ただし、上記の非同期処理はPython3.6以降でのみ動作します。

上記の3つのアプローチを用いて、DynamoDBとの通信にかかる時間を短縮し、全体のパフォーマンスを向上させることができます。ただし、実際の効果はアプリケーションの使用方法やデータアクセスパターンによって異なるため、適切なアプローチを選択し、効果を確認することが重要です。
